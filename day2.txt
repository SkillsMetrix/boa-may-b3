
from fastapi import HTTPException,status,APIRouter,Depends
from .import schema,models
from sqlalchemy.orm import Session
from .database import get_connection
from random import randrange

userData=[]

router= APIRouter(tags=["Create , Update ,Delete Operations"])

def searchUser(id):
    for index,value in enumerate(userData):
        if value['id']== id:
            return index



@router.delete('/deleteuser/{id}')
def deleteUser(id:int):
    post=searchUser(id)
    if post == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="Sorry, User With Given ID not Found")
    userData.pop(post)
    return {'user found and deleted': post}


@router.put('/updateuser/{id}')
def updateUser(id:int,data:schema.User):
    post=searchUser(id)
    if post == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="Sorry, User With Given ID not Found")
    userValue=data.model_dump()
    userValue['id']=id
    userData[post]=userValue
    
    return {'user found and updated': userValue}


@router.post('/addusers')
def addUser(data:schema.User,db:Session=Depends(get_connection)):
    postdata=models.UserApp(**data.model_dump())
    db.add(postdata)
    db.commit()
    return {'message':postdata}
-----



# this file is all about loading the data
from sqlalchemy.orm import Session
from .database import get_connection
from fastapi import HTTPException,status,APIRouter,Depends
from . import models
router=APIRouter(tags=["READ The Data"])

userData=[]

def searchUser(id):
    for index,value in enumerate(userData):
        if value['id']== id:
            return index

@router.get('/loadusers')
def loadUsers(db:Session=Depends(get_connection)):
    posts=db.query(models.UserApp).all()
    return {'message':posts}


@router.get('/loaduser/{id}')
def loadUser(id:int):
    post=searchUser(id)
    if post == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="Sorry, User With Given ID not Found")
    
    return {'user found': post}







